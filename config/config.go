package config

import (
	"github.com/firstrow/wig"
	"github.com/firstrow/wig/commands"
	"github.com/firstrow/wig/ui"
)

func DefaultKeyMap() wig.ModeKeyMap {
	return wig.ModeKeyMap{
		wig.MODE_NORMAL: wig.KeyMap{
			// personal config
			"F2": commands.CmdFormatBufferAndSave,
			"F5": commands.CmdMakeBuild,

			"ctrl+e": wig.CmdScrollDown,
			"ctrl+y": wig.CmdScrollUp,
			"h":      wig.CmdCursorLeft,
			"l":      wig.CmdCursorRight,
			"j":      wig.CmdCursorLineDown,
			"k":      wig.CmdCursorLineUp,
			"i":      wig.CmdEnterInsertMode,
			"v":      wig.CmdVisualMode,
			"V":      wig.CmdVisualLineMode,
			"a":      wig.CmdEnterInsertModeAppend,
			"A":      wig.CmdAppendLine,
			"w":      wig.CmdForwardWord,
			"b":      wig.CmdBackwardWord,
			"x":      wig.CmdDeleteCharForward,
			"X":      wig.CmdDeleteCharBackward,
			"^":      wig.CmdCursorFirstNonBlank,
			"$":      wig.CmdGotoLineEnd,
			"0":      wig.CmdCursorBeginningOfTheLine,
			"o":      wig.CmdLineOpenBelow,
			"O":      wig.CmdLineOpenAbove,
			"J":      wig.CmdJoinNextLine,
			"p":      wig.CmdYankPut,
			"P":      wig.CmdYankPutBefore,
			"r":      wig.CmdReplaceChar,
			"f":      wig.CmdForwardToChar,
			"t":      wig.CmdForwardBeforeChar,
			"F":      wig.CmdBackwardChar,
			"G":      wig.CmdGotoLineEndOfFile,
			"n":      wig.CmdSearchNext,
			"N":      wig.CmdSearchPrev,
			"u":      wig.CmdUndo,
			"ctrl+r": wig.CmdRedo,
			":":      ui.CmdLineInit,
			"/":      ui.CmdSearchPromptInit,
			";":      commands.CmdBufferPicker,
			"*":      commands.CmdSearchWordUnderCursor,
			"q":      wig.CmdMacroRecord,
			"@":      wig.CmdMacroPlay,
			".":      wig.CmdMacroRepeat,
			"c": wig.KeyMap{
				"$": wig.CmdChangeEndOfLine,
				"c": wig.CmdChangeLine,
				"w": wig.CmdChangeWord,
				"a": wig.KeyMap{
					"w": wig.CmdChangeWORD,
				},
				"i": wig.CmdChangeInsideBlock,
				"f": wig.CmdChangeTo,
				"t": wig.CmdChangeBefore,
			},
			"d": wig.KeyMap{
				"d": wig.CmdDeleteLine,
				"w": wig.CmdDeleteWord,
				"f": wig.CmdDeleteTo,
				"t": wig.CmdDeleteBefore,
				"$": wig.CmdDeleteEndOfLine,
			},
			"y": wig.KeyMap{
				"y": wig.CmdYank,
				"$": wig.CmdYankEol,
				"t": wig.CmdYankBeforeChar,
				"f": wig.CmdYankToChar,
			},
			"g": wig.KeyMap{
				"g": wig.CmdGotoLine0,
				"d": commands.CmdGotoDefinition,
				"O": commands.CmdGotoDefinitionOtherWindow,
				"o": commands.CmdViewDefinitionOtherWindow,
				"c": wig.CmdToggleComment,
			},
			"ctrl+c": wig.KeyMap{
				"ctrl+c": commands.CmdExecute,
				"ctrl+x": wig.CmdExit,
			},
			"ctrl+w": wig.KeyMap{
				"v":      wig.CmdWindowVSplit,
				"w":      wig.CmdWindowNext,
				"q":      wig.CmdWindowClose,
				"o":      wig.CmdWindowCloseOther,
				"c":      wig.CmdWindowCloseAndKillBuffer,
				"ctrl+w": wig.CmdWindowNext,
				"t":      wig.CmdWindowToggleLayout,
			},
			"]": wig.KeyMap{
				"]": wig.CmdJumpForward,
			},
			"[": wig.KeyMap{
				"[": wig.CmdJumpBack,
			},
			"Space": wig.KeyMap{
				"/": commands.CmdSearchProject,
				"?": commands.CmdCommandPalettePicker,
				"`": wig.CmdBufferCycle,
				"*": commands.CmdProjectSearchWordUnderCursor,
				"h": commands.CmdLspHover,
				"e": commands.CmdLspShowDiagnostics,
				"b": wig.KeyMap{
					"b": commands.CmdBufferPicker,
					"k": wig.CmdKillBuffer,
				},
				"f": commands.CmdFindProjectFilePicker,
				"F": commands.CmdCurrentBufferDirFilePicker,
				"s": wig.KeyMap{
					"s": commands.CmdSearchLine,
				},
				"t": commands.CmdThemeSelect,
			},
		},
		wig.MODE_VISUAL: wig.KeyMap{
			"ctrl+e": wig.WithSelection(wig.CmdScrollDown),
			"ctrl+y": wig.WithSelection(wig.CmdScrollUp),
			"w":      wig.WithSelection(wig.CmdForwardWord),
			"b":      wig.WithSelection(wig.CmdBackwardWord),
			"h":      wig.WithSelection(wig.CmdCursorLeft),
			"l":      wig.WithSelection(wig.CmdCursorRight),
			"j":      wig.WithSelection(wig.CmdCursorLineDown),
			"k":      wig.WithSelection(wig.CmdCursorLineUp),
			"$":      wig.WithSelection(wig.CmdGotoLineEnd),
			"0":      wig.WithSelection(wig.CmdCursorBeginningOfTheLine),
			"f":      wig.CmdForwardToChar,
			"t":      wig.CmdForwardBeforeChar,
			"x":      wig.CmdSelectionDelete,
			"d":      wig.CmdSelectionDelete,
			"y":      wig.CmdYank,
			"p":      wig.CmdYankPut,
			"c":      wig.CmdSelectionChange,
			"Esc":    wig.CmdNormalMode,
			"*":      commands.CmdSearchWordUnderCursor,
			"g": wig.KeyMap{
				"g": wig.WithSelection(wig.CmdGotoLine0),
				"c": wig.CmdToggleComment,
			},
		},
		wig.MODE_VISUAL_LINE: wig.KeyMap{
			"ctrl+e": wig.CmdScrollDown,
			"ctrl+y": wig.CmdScrollUp,
			"j":      wig.WithSelection(wig.CmdCursorLineDown),
			"k":      wig.WithSelection(wig.CmdCursorLineUp),
			"h":      wig.CmdCursorLeft,
			"l":      wig.CmdCursorRight,
			"Esc":    wig.CmdNormalMode,
			"x":      wig.CmdSelectionDelete,
			"d":      wig.CmdSelectionDelete,
			"y":      wig.CmdYank,
			"p":      wig.CmdYankPut,
			"g": wig.KeyMap{
				"g": wig.WithSelection(wig.CmdGotoLine0),
				"c": wig.CmdToggleComment,
			},
		},
		wig.MODE_INSERT: wig.KeyMap{
			"Esc":    wig.CmdExitInsertMode,
			"ctrl+f": wig.CmdCursorRight,
			"ctrl+b": wig.CmdCursorLeft,
			"ctrl+j": wig.CmdCursorLineDown,
			"ctrl+k": wig.CmdCursorLineUp,
			"ctrl+n": wig.CmdAutocompleteTrigger,
		},
	}
}

